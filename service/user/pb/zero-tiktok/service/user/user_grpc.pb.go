// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 登录
	Login(ctx context.Context, in *LoginOrRegisterRequest, opts ...grpc.CallOption) (*LoginOrRegisterResponse, error)
	// 注册
	Register(ctx context.Context, in *LoginOrRegisterRequest, opts ...grpc.CallOption) (*LoginOrRegisterResponse, error)
	// 获取单个用户信息
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// 获取多个用户信息
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	//识别用户（token转id）
	GetIdByToken(ctx context.Context, in *TokenToUserRequest, opts ...grpc.CallOption) (*TokenToUserResponse, error)
	//获得用户关注和粉丝数量
	GetUserFollowAndFollowerCount(ctx context.Context, in *GetUserFollowAndFollowerCountRequest, opts ...grpc.CallOption) (*GetUserFollowAndFollowerCountResponse, error)
	//获得用户发布的视频总数
	GetUserVideoCount(ctx context.Context, in *GetUserVideoCountRequest, opts ...grpc.CallOption) (*GetUserVideoCountResponse, error)
	//用户的获赞总数
	GetUserTotalFavorited(ctx context.Context, in *GetUserTotalFavoritedRequest, opts ...grpc.CallOption) (*GetUserTotalFavoritedResponse, error)
	//单个视频的点赞量
	GetVideoFavorited(ctx context.Context, in *GetVideoFavoritedRequest, opts ...grpc.CallOption) (*GetVideolFavoritedResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginOrRegisterRequest, opts ...grpc.CallOption) (*LoginOrRegisterResponse, error) {
	out := new(LoginOrRegisterResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *LoginOrRegisterRequest, opts ...grpc.CallOption) (*LoginOrRegisterResponse, error) {
	out := new(LoginOrRegisterResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetIdByToken(ctx context.Context, in *TokenToUserRequest, opts ...grpc.CallOption) (*TokenToUserResponse, error) {
	out := new(TokenToUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetIdByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFollowAndFollowerCount(ctx context.Context, in *GetUserFollowAndFollowerCountRequest, opts ...grpc.CallOption) (*GetUserFollowAndFollowerCountResponse, error) {
	out := new(GetUserFollowAndFollowerCountResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserFollowAndFollowerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserVideoCount(ctx context.Context, in *GetUserVideoCountRequest, opts ...grpc.CallOption) (*GetUserVideoCountResponse, error) {
	out := new(GetUserVideoCountResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserVideoCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserTotalFavorited(ctx context.Context, in *GetUserTotalFavoritedRequest, opts ...grpc.CallOption) (*GetUserTotalFavoritedResponse, error) {
	out := new(GetUserTotalFavoritedResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserTotalFavorited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetVideoFavorited(ctx context.Context, in *GetVideoFavoritedRequest, opts ...grpc.CallOption) (*GetVideolFavoritedResponse, error) {
	out := new(GetVideolFavoritedResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetVideoFavorited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 登录
	Login(context.Context, *LoginOrRegisterRequest) (*LoginOrRegisterResponse, error)
	// 注册
	Register(context.Context, *LoginOrRegisterRequest) (*LoginOrRegisterResponse, error)
	// 获取单个用户信息
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// 获取多个用户信息
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	//识别用户（token转id）
	GetIdByToken(context.Context, *TokenToUserRequest) (*TokenToUserResponse, error)
	//获得用户关注和粉丝数量
	GetUserFollowAndFollowerCount(context.Context, *GetUserFollowAndFollowerCountRequest) (*GetUserFollowAndFollowerCountResponse, error)
	//获得用户发布的视频总数
	GetUserVideoCount(context.Context, *GetUserVideoCountRequest) (*GetUserVideoCountResponse, error)
	//用户的获赞总数
	GetUserTotalFavorited(context.Context, *GetUserTotalFavoritedRequest) (*GetUserTotalFavoritedResponse, error)
	//单个视频的点赞量
	GetVideoFavorited(context.Context, *GetVideoFavoritedRequest) (*GetVideolFavoritedResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Login(context.Context, *LoginOrRegisterRequest) (*LoginOrRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *LoginOrRegisterRequest) (*LoginOrRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) GetIdByToken(context.Context, *TokenToUserRequest) (*TokenToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdByToken not implemented")
}
func (UnimplementedUserServiceServer) GetUserFollowAndFollowerCount(context.Context, *GetUserFollowAndFollowerCountRequest) (*GetUserFollowAndFollowerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowAndFollowerCount not implemented")
}
func (UnimplementedUserServiceServer) GetUserVideoCount(context.Context, *GetUserVideoCountRequest) (*GetUserVideoCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideoCount not implemented")
}
func (UnimplementedUserServiceServer) GetUserTotalFavorited(context.Context, *GetUserTotalFavoritedRequest) (*GetUserTotalFavoritedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTotalFavorited not implemented")
}
func (UnimplementedUserServiceServer) GetVideoFavorited(context.Context, *GetVideoFavoritedRequest) (*GetVideolFavoritedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFavorited not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOrRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginOrRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOrRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*LoginOrRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetIdByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetIdByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetIdByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetIdByToken(ctx, req.(*TokenToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFollowAndFollowerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowAndFollowerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFollowAndFollowerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserFollowAndFollowerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFollowAndFollowerCount(ctx, req.(*GetUserFollowAndFollowerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserVideoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserVideoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserVideoCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserVideoCount(ctx, req.(*GetUserVideoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserTotalFavorited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTotalFavoritedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserTotalFavorited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserTotalFavorited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserTotalFavorited(ctx, req.(*GetUserTotalFavoritedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetVideoFavorited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoFavoritedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetVideoFavorited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetVideoFavorited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetVideoFavorited(ctx, req.(*GetVideoFavoritedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetIdByToken",
			Handler:    _UserService_GetIdByToken_Handler,
		},
		{
			MethodName: "GetUserFollowAndFollowerCount",
			Handler:    _UserService_GetUserFollowAndFollowerCount_Handler,
		},
		{
			MethodName: "GetUserVideoCount",
			Handler:    _UserService_GetUserVideoCount_Handler,
		},
		{
			MethodName: "GetUserTotalFavorited",
			Handler:    _UserService_GetUserTotalFavorited_Handler,
		},
		{
			MethodName: "GetVideoFavorited",
			Handler:    _UserService_GetVideoFavorited_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
